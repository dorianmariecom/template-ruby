class Code
  class Node
    class Statement
      def initialize(statement)
        if statement.key?(:nothing)
          @statement = ::Code::Node::Nothing.new
        elsif statement.key?(:boolean)
          @statement = ::Code::Node::Boolean.new(statement[:boolean])
        elsif statement.key?(:number)
          @statement = ::Code::Node::Number.new(statement[:number])
        elsif statement.key?(:string)
          @statement = ::Code::Node::String.new(statement[:string])
        elsif statement.key?(:call)
          @statement = ::Code::Node::Call.new(statement[:call])
        elsif statement.key?(:name)
          @statement = ::Code::Node::Name.new(statement[:name])
        elsif statement.key?(:list)
          @statement = ::Code::Node::List.new(statement[:list])
        elsif statement.key?(:dictionnary)
          @statement = ::Code::Node::Dictionnary.new(statement[:dictionnary])
        elsif statement.key?(:negation)
          @statement = ::Code::Node::Negation.new(statement[:negation])
        elsif statement.key?(:power)
          @statement = ::Code::Node::Power.new(statement[:power])
        elsif statement.key?(:unary_minus)
          @statement = ::Code::Node::UnaryMinus.new(statement[:unary_minus])
        elsif statement.key?(:multiplication)
          @statement = ::Code::Node::Operation.new(statement[:multiplication])
        elsif statement.key?(:addition)
          @statement = ::Code::Node::Operation.new(statement[:addition])
        elsif statement.key?(:shift)
          @statement = ::Code::Node::Operation.new(statement[:shift])
        elsif statement.key?(:bitwise_and)
          @statement = ::Code::Node::Operation.new(statement[:bitwise_and])
        elsif statement.key?(:bitwise_or)
          @statement = ::Code::Node::Operation.new(statement[:bitwise_or])
        elsif statement.key?(:greater_than)
          @statement = ::Code::Node::Operation.new(statement[:greater_than])
        elsif statement.key?(:equality)
          @statement = ::Code::Node::Operation.new(statement[:equality])
        elsif statement.key?(:and_operator)
          @statement = ::Code::Node::Operation.new(statement[:and_operator])
        elsif statement.key?(:or_operator)
          @statement = ::Code::Node::Operation.new(statement[:or_operator])
        elsif statement.key?(:range)
          @statement = ::Code::Node::Range.new(statement[:range])
        elsif statement.key?(:ternary)
          @statement = ::Code::Node::Ternary.new(statement[:ternary])
        elsif statement.key?(:rescue)
          @statement = ::Code::Node::Rescue.new(statement[:rescue])
        elsif statement.key?(:equal)
          @statement = ::Code::Node::Equal.new(statement[:equal])
        elsif statement.key?(:defined)
          @statement = ::Code::Node::Defined.new(statement[:defined])
        elsif statement.key?(:not_keyword)
          @statement = ::Code::Node::NotKeyword.new(statement[:not_keyword])
        elsif statement.key?(:or_keyword)
          @statement = ::Code::Node::OrKeyword.new(statement[:or_keyword])
        elsif statement.key?(:if_modifier)
          @statement = ::Code::Node::IfModifier.new(statement[:if_modifier])
        elsif statement.key?(:if)
          @statement = ::Code::Node::If.new(statement[:if])
        elsif statement.key?(:while)
          @statement = ::Code::Node::While.new(statement[:while])
        elsif statement.key?(:group)
          @statement = ::Code::Node::Group.new(statement[:group])
        else
          raise NotImplementedError.new(statement.inspect)
        end
      end

      def evaluate(context)
        @statement.evaluate(context)
      end
    end
  end
end
